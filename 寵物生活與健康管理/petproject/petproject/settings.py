"""
Django settings for petproject project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# 匯入 Path 類別，用來處理路徑相關操作
from pathlib import Path

# 匯入 decouple 的 config 方法，用來安全讀取 .env 檔中的機密資訊
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: don't run with debug turned on in production!
# 秘密金鑰與除錯模式
SECRET_KEY = config('SECRET_KEY')  # 從 .env 讀取
DEBUG = config('DEBUG', cast=bool)  # 從 .env 讀取

# 允許的主機清單，部署上線時需填入網域名稱或 IP
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django 預設功能模組(基本 app)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 本地 App
    'petapp',
    
    # Django 網站識別模組（必要）
    'django.contrib.sites',

    # 第三方登入驗證套件 allauth 與其附加功能
    'allauth',
    'allauth.account',  # 帳號系統
    'allauth.socialaccount',    # 社群帳號登入系統
    'allauth.socialaccount.providers.google',  # 加入 Google 登入
]

# ===== 中介軟體設定（middleware pipeline）=====
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 安全性設定
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session 處理
    'django.middleware.common.CommonMiddleware',  # 一般請求處理
    'django.middleware.csrf.CsrfViewMiddleware',  # 防止 CSRF 攻擊
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 驗證機制
    'django.contrib.messages.middleware.MessageMiddleware',  # 提示訊息機制
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 防止點擊劫持攻擊

    'allauth.account.middleware.AccountMiddleware',  # allauth 專用中介軟體
]

# 網站的 URL 總路由設定檔位置
ROOT_URLCONF = 'petproject.urls'

# ===== Template 模板引擎設定 =====
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # 使用 Django 原生模板系統
        'DIRS': [BASE_DIR / 'templates'],   # 加上templates路徑
        'APP_DIRS': True,  # 自動尋找 app 中的 templates 資料夾
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # 提供 request 物件給模板使用
                'django.contrib.auth.context_processors.auth',  # 使用者驗證狀態等資訊
                'django.contrib.messages.context_processors.messages',  # 訊息提示功能
            ],
        },
    },
]

# WSGI 應用程式設定（伺服器入口點）
WSGI_APPLICATION = 'petproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# ===== 資料庫設定（預設使用 SQLite）=====
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',  # 資料庫檔案路徑
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# ===== 密碼驗證規則 =====
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # 防止與個資相似
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # 設定密碼最小長度
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # 禁用常見密碼
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # 禁用純數字密碼
    },
]

# ===== 必須指定 SITE_ID 才能啟用 allauth =====
SITE_ID = 1

# ===== 驗證後端設定，允許使用 allauth 的登入系統 =====
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # 原生 Django 認證系統
    'allauth.account.auth_backends.AuthenticationBackend',  # 加入 allauth 的登入方式
)

# 註冊成功後導向頁面
SOCIALACCOUNT_LOGIN_ON_GET = True

# 登入與登出成功後導向頁面
LOGIN_REDIRECT_URL = '/'  # 登入成功導向首頁
ACCOUNT_LOGOUT_REDIRECT_URL = '/'  # allauth 登出後導向首頁
LOGOUT_REDIRECT_URL = '/accounts/logout-success/'  # 自訂登出成功頁面
SOCIALACCOUNT_LOGIN_REDIRECT_URL = '/'  # Google 登入後導向首頁

# ===== 郵件後端設定（開發階段使用 console 模式）=====
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ===== allauth 設定（使用 email 作為登入身份）=====
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # 使用 email 作為帳號登入依據
ACCOUNT_EMAIL_REQUIRED = True  # 必填 email
ACCOUNT_USERNAME_REQUIRED = True  # 必填 使用者名稱

# Email 驗證設定
ACCOUNT_EMAIL_VERIFICATION = 'none'  # 關閉 email 驗證，開發階段建議關掉，上線時請改為 'mandatory'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# ===== 語系與時區設定 =====
LANGUAGE_CODE = 'zh-hant'  # 預設 en-us 英文，改為繁體中文 zh-hant
TIME_ZONE = 'Asia/Taipei'   # 預設 UTC，改為台北時區

USE_I18N = True  # 啟用國際化

USE_TZ = True  # 啟用時區支援


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# ===== 靜態檔案（如 CSS/JS/圖片）相關設定 =====
STATIC_URL = 'static/'  # 靜態檔案 URL 路徑前綴
STATICFILES_DIRS = [
    BASE_DIR / 'static' # 加入 static 路徑
]

# ===== 社群登入（Google）設定，使用 .env 檔儲存憑證資訊 =====
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID'),  # 從 .env 讀取 Google Client ID
            'secret': config('GOOGLE_CLIENT_SECRET'),  # 從 .env 讀取 Google Client Secret
            'key': ''  # 預設空值即可
        }
    }
}
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# ===== 預設主鍵欄位型別設定（從 Django 3.2 起建議）=====
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==== 儲存_上傳的寵物照片，在media文件夾 ====
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
